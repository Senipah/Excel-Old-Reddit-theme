// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
@forward 'variables';
@use 'variables' as v;
@use 'sass:map';
@use "../theme/reddit-dark" as dark;
@use "../theme/reddit-light" as light;

@mixin pargin($val) {
  margin: $val;
  padding: $val;
}

$_breakpoints: (
  "extra-small": (
    max-width: 600px,
  ),
  "small": (
    min-width: 600px,
  ),
  "medium": (
    min-width: 768px,
  ),
  "large": (
    min-width: 992px,
  ),
  "extra-large": (
    min-width: 1200px,
  ),
) !default;

@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($_breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media only screen and #{inspect(map-get($_breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin stroke($color, $shadow: 0px) {
  $color: map-get(light.$theme, $color);
  $size: 1px;
  $blur: 0;
  text-shadow: $shadow $shadow $blur $color, $size * -1 $size * -1 $blur $color,
    $size $size * -1 $blur $color, $size * -1 $size $blur $color,
    $size $size $blur $color;
}

@mixin theme-stroke($key, $shadow: 0px) {
  $val: map-get(light.$theme, $key);
  $size: 1px;
  $blur: 0;
  @include stroke($val, $shadow);
  @media (prefers-color-scheme: dark) {
    $val: map-get(dark.$theme, $key);
    @include stroke($val, $shadow);
  }
}

@mixin themeProperty(
  $theme,
  $property,
  $color,
  $additionalPropertiesPositionIsFront,
  $additionalProperties
) {
  @if $additionalPropertiesPositionIsFront {
    #{$property}: unquote(
      $additionalProperties + " " + map-get($theme, $color)
    );
  } @else {
    #{$property}: unquote(
      map-get($theme, $color) + " " + $additionalProperties
    );
  }
}

// use like: @include theme('color', $secondary-text-color);

@mixin theme(
  $property,
  $color,
  $forceDark: false,
  $additionalPropertiesPositionIsFront: false,
  $additionalProperties: ""
) {
  @if $forceDark {
    @include themeProperty(
      dark.$theme,
      $property,
      $color,
      $additionalPropertiesPositionIsFront,
      $additionalProperties
    );
  } @else {
    @include themeProperty(
      light.$theme,
      $property,
      $color,
      $additionalPropertiesPositionIsFront,
      $additionalProperties
    );

    @media (prefers-color-scheme: dark) {
      @include themeProperty(
        dark.$theme,
        $property,
        $color,
        $additionalPropertiesPositionIsFront,
        $additionalProperties
      );
    }
  }
}

@mixin thing($border: false, $forceDark: false) {
  @include theme("background-color", v.$body, $forceDark);
  @include theme("color", v.$bodyText, $forceDark);
  border-radius: v.$radius;
  @if $border {
    border: 1px solid;
  }
  @include theme("border-color", v.$line, $forceDark);
}

@mixin container($margin: false) {
  @if $margin {
    margin: v.$container-margin-vert v.$container-margin-hor;
  }
  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.14);
  padding: v.$padding;
}

@mixin push--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin input($forceDark: false) {
  @include theme("border", v.$line, $forceDark, true, "1px solid");
  padding: 0 v.$padding;
  @include theme("background-color", v.$field, $forceDark);
  @include theme("color", v.$bodyText, $forceDark);
  border-radius: v.$radius;
  &[type="text"] {
    padding: 0 42px 0 v.$padding;
    border: 0 solid;
    border-radius: v.$radius;
    box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.14);
    transition: box-shadow 0.2s cubic-bezier(0.4, 0, 1, 1),
      background 0.2s cubic-bezier(0.4, 0, 0.2, 1),
      color 0.2s cubic-bezier(0.4, 0, 0.2, 1);

    &:hover {
      box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),
        0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
    }

    &:focus {
      border-radius: 2px 2px 0 0;

      &:hover {
        box-shadow: 0 1px 5px rgba(0, 0, 0, 0.24) !important;
      }
    }

    &::-webkit-input-placeholder,
    &:-moz-placeholder,
    &::-moz-placeholder,
    &:-ms-input-placeholder {
      @include theme("color", v.$placeholder, $forceDark);
      font-size: 14px;
      text-transform: capitalize;
      top: 1px;
      position: relative;
    }
  }
  &:hover {
    @include theme("background-color", v.$body, $forceDark);
    @include theme("border", v.$button, $forceDark, true, "1px solid");
  }
}

@mixin reddit-button {
  font-size: 12px;
  line-height: 24px;
  padding: 4px 9px 2px;
  width: 100%;
  font-weight: 700;
  letter-spacing: 0.5px;
  text-transform: uppercase;
  border: 1px solid transparent;
  border-radius: 4px;
  text-align: center;
  text-decoration: none;
  @include theme("border-color", v.$button);
  @include theme("fill", v.$body);
  @include theme("border-color", v.$body);
  @include theme("background-color", v.$button);

  &:active {
    @include theme("background-color", v.$buttonShaded80);
    @include theme("border-color", v.$buttonShaded80);
    @include theme("color", v.$body);
    @include theme("fill", v.$body);
  }

  &:hover {
    @include theme("background-color", v.$buttonTinted50);
    @include theme("border-color", v.$buttonTinted50);
    @include theme("color", v.$body);
    @include theme("fill", v.$body);
  }
}

@mixin normal-button {
  @include theme("background", v.$button);
  @include theme("color", v.$body);
  @include theme("border-color", v.$button);
}

@mixin active-button {
  @include theme("background", v.$buttonShaded80);
  @include theme("color", v.$button);
  @include theme("border-color", v.$button);
}

@mixin hover-button {
  @include theme("background", v.$buttonTinted50);
  @include theme("color", v.$body);
  @include theme("border-color", v.$buttonTinted50);
}

@mixin link-as-button($active: false) {
  @if ($active) {
    @include active-button();
    &:active {
      @include normal-button();
    }
  } @else {
    @include normal-button();
    &:active {
      @include active-button();
    }
  }
  &:hover {
    @include hover-button();
  }
  display: inline-block;
  margin: 0;
  padding: 0 v.$padding;
  text-align: center;
  border-radius: v.$radius;
  border: 1px solid;
  text-transform: uppercase;
  font-weight: 700;
  height: v.$button-height;
  line-height: v.$button-height;
  font-size: 14px;
}

@mixin naut-button($active: false) {
  @if ($active) {
    @include active-button();
    &:active {
      @include normal-button();
    }
  } @else {
    @include normal-button();
    &:active {
      @include active-button();
    }
  }

  &:hover {
    @include hover-button();
  }
  margin: v.$padding 0;
  padding: 0 v.$padding;
  text-align: center;
  border-radius: v.$radius;
  border: 1px solid;
  text-transform: uppercase;
  font-weight: 700;
  height: v.$button-height;
  line-height: v.$button-height;
  font-size: 14px;

  // font-family: Lato, Arial, sans-serif;
  box-shadow: 0 2px 1.5px 0 rgba(0, 0, 0, 0.12), 0 0 4px 0 rgba(0, 0, 0, 0.12);
  transition: box-shadow 0.2s cubic-bezier(0.4, 0, 1, 1),
    background 0.2s cubic-bezier(0.4, 0, 0.2, 1),
    color 0.2s cubic-bezier(0.4, 0, 0.2, 1);

  a {
    background-color: transparent;
    text-align: center;
    color: inherit;
    text-transform: inherit;
    font-weight: inherit;
  }
}

@mixin button($active: false) {
  @include naut-button($active);
}
